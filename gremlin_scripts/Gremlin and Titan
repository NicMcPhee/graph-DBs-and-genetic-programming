***********************************************************************************************************************************
Notes from 11/9

graph = TitanFactory.open('conf/titan-berkeleyje-es.properties')

new File("fileName.csv").splitEachLine(","){fields ->
	println("Processing")
	graph.addVertex("uuid", fields[2], ...)
}

g = graph.traversal()

g.V().has('total_error', '100956.0').next() // Get vertex that has a total error of 100956

g.V(id).values() // Not sure if 'id' was a variable or an actual ID

g.V(*Some vertex*).valueMap() // Returns all labeled values for *Some vertex*, uses Saturn in example

***********************************************************************************************************************************
Copied & Pasted From Titan:db
http://s3.thinkaurelius.com/docs/titan/1.0.0/getting-started.html

gremlin> saturn = g.V().has('name', 'saturn').next()
==>v[256]
gremlin> g.V(saturn).valueMap()
==>[name:[saturn], age:[10000]]
gremlin> g.V(saturn).in('father').in('father').values('name')
==>hercules
gremlin> hercules = g.V(saturn).repeat(__.in('father')).times(2).next()
==>v[1536]

The Gremlin overview presented in this section focused on the Gremlin-Groovy language implementation. Additional JVM language implementations of Gremlin are available.
https://github.com/tinkerpop/gremlin/wiki/JVM-Language-Implementations

***********************************************************************************************************************************
"25+ Handy Gremlin Examples and Code Snippets for Graph Database Traversal and Manipulation"
http://www.fromdev.com/2013/09/Gremlin-Example-Query-Snippets-Graph-DB.html

Get The Count Of Vertices With A Attribute Value
g.V('firsName','John').count();

***********************************************************************************************************************************
From wikipedia: Lots of examples!
Like Declarative Pattern Matching Traversals vs. OLAP Traversal
https://en.wikipedia.org/wiki/Gremlin_(programming_language)#Traversal_Examples

gremlin> g.V().label().groupCount()		// For each vertex in the graph, emit its label, then group and count each distinct label.
==>[occupation:21, movie:3883, category:18, user:6040]

gremlin> g.V().hasLabel('movie').values('year').min()		//What year was the oldest movie made?
==>1919

gremlin> g.V().has('movie','name','Die Hard').inE('rated').values('stars').mean()		// What is Die Hard's average rating?
==>4.121848739495798

***********************************************************************************************************************************
Notes from lecture:
http://www.slideshare.net/calebwjones/intro-to-graph-databases-using-tinkerpops-titandb-and-gremlin
Suggests Gephi for visualization tool.

Where g is graph traversal.
g.V() // All verticies
g.v() // This verticie (Same with edges)
g.V("thisType", "matchThis")

Where g is a graph factory.
@28:40
g.V.count()
g.E.count()

***********************************************************************************************************************************

Gephi Example
https://www.youtube.com/watch?v=wtiUjna9IMo

***********************************************************************************************************************************

11/16
To run script in Gremlin:
:load /home/casal033/MAP/graph-DBs-and-genetic-programming/gremlin_scripts/LoadNodes.groovy

gremlin> g.V(402206864).valueMap()
==>[generation:[191], total_error:[3554.0], numSelections:[0], numChildren:[0], run_uuid:[884ccc2a-85ec-43d6-b61d-03a33f9e4827], location:[999], uuid:[8536374f-c5b9-46fc-901e-f9d72d9214e5]]

gremlin> g.V().has('total_error', 0.toFloat()).next()
==>v[78712864]
gremlin> g.V().has('total_error', 0f).next()
==>v[78712864]

***********************************************************************************************************************************

11/23
* We're currently deleting the database directory to delete graphs *
Gremlin remove all Vertex:
graph.close()
com.thinkaurelius.titan.core.util.TitanCleanup.clear(graph);

* Ended: Looking at elesticseach for external index based searching *
Install on Bebop next time!

* Not attempted yet *
Adding Edges:
http://gremlindocs.spmallette.documentup.com/#graphaddedge
gremlin> g = new TinkerGraph()
==>tinkergraph[vertices:0 edges:0]
gremlin> v1 = g.addVertex(100)
==>v[100]
gremlin> v2 = g.addVertex(200)
==>v[200]
gremlin> g.addEdge(v1,v2,'friend')
==>e[0][100-friend->200]
gremlin> g.addEdge(1000,v1,v2,'buddy')
==>e[1000][100-buddy->200]
gremlin> g.addEdge(null,v1,v2,'pal',[weight:0.75f])
==>e[1][100-pal->200]

***********************************************************************************************************************************

11/30
* When running gremlin script, if graph directory exists and do not have the write permissions, bad error message occurs

* Close graph and mgmt after running script, otherwise badness and exceptions

* We think the default schema is being used for indexing, and we do not know what type of data it's saved as. We want to set this ourselves.
** we do not want to use the default schema **

*** Should we index before loading everything in?

Login as Maggie
Run gremlin on bebop from directory that has scripts with:
/Research/titan-1.0.0-hadoop1/bin/gremlin.sh

Remove graphes and searchindex before running script
Use :load LoadNodes.groovy in gremlin

***********************************************************************************************************************************

12/7
Range with ints:
g.V().has("total_error", inside(0,150)).count()
Ranges with labels:
g.V().has("total_error", inside(0,150)).count()

Indexing is taking a long period of time, we may want ot remove:
uuid = mgmt.getPropertyKey('uuid')
& replace with run  uuid, may improve speed on building index.
(Success with 100 file, but not with 192,000)

Attempting to build index for at least 10 min.
Got return, however top shows us it's still running.
On close of Gremlin:
Dec 07, 2015 7:12:14 PM com.google.common.cache.LocalCache processPendingNotifications

***********************************************************************************************************************************

12/8

Nic did some playing around and confirmed that we did just need to wait for the index building to finish. 
Not sure how long it actually took, but probably between 30 and 60 minutes.

After the index was build, queries are generally really fast. Some potentially useful queries:

// Find the largest generation in the DB
g.V().values('generation').max()

// Find the minimal total error in generation 176
g.V().has('generation', 176).values('total_error').min()

// Print the minimal total error for each of the 191 generations in a run
// You need the `.next()` bit on the end or you get a TinkerPop object
// instead of the value.
191.times { print " " + g.V().has('generation', it).values('total_error').min().next() }

// Loop over each of 191 generations, and print a line of the form `[gen, min, mean10, mean100]`
// for each generations, where `gen` is the generation, `min` is the minimum `total_error`,
// `mean10` is the average of the 10 best total errors, and `mean100` is the average of the 100
// best total errors in that generation.
191.times { println "[" + it + ", " + (g.V().has('generation', it).values('total_error').min().next()) 
                + ", " + (g.V().has('generation', it).values('total_error').order().limit(10).mean().next()) 
                + ", " + (g.V().has('generation', it).values('total_error').order().limit(100).mean().next()) + "]," }
