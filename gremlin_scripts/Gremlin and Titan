***********************************************************************************************************************************
Notes from 11/9, unless specified otherwise.

graph = TitanFactory.open('conf/titan-berkeleyje-es.properties')

new File("fileName.csv").splitEachLine(","){fields ->
	println("Processing")
	graph.addVertex("uuid", fields[2], ...)
}

g = graph.traversal()

g.V().has('total_error', '100956.0').next() // Get vertex that has a total error of 100956

g.V(id).values() // Not sure if 'id' was a variable or an actual ID

g.V(*Some vertex*).valueMap() // Returns all labeled values for *Some vertex*, uses Saturn in example

***********************************************************************************************************************************

Copied & Pasted From Titan:db
http://s3.thinkaurelius.com/docs/titan/1.0.0/getting-started.html

gremlin> saturn = g.V().has('name', 'saturn').next()
==>v[256]
gremlin> g.V(saturn).valueMap()
==>[name:[saturn], age:[10000]]
gremlin> g.V(saturn).in('father').in('father').values('name')
==>hercules
gremlin> hercules = g.V(saturn).repeat(__.in('father')).times(2).next()
==>v[1536]

The Gremlin overview presented in this section focused on the Gremlin-Groovy language implementation. Additional JVM language implementations of Gremlin are available.
https://github.com/tinkerpop/gremlin/wiki/JVM-Language-Implementations

***********************************************************************************************************************************

"25+ Handy Gremlin Examples and Code Snippets for Graph Database Traversal and Manipulation"
http://www.fromdev.com/2013/09/Gremlin-Example-Query-Snippets-Graph-DB.html

Get The Count Of Vertices With A Attribute Value
g.V('firsName','John').count();

***********************************************************************************************************************************

From wikipedia: Lots of examples of queries with Titan!
Like Declarative Pattern Matching Traversals vs. OLAP Traversal
https://en.wikipedia.org/wiki/Gremlin_(programming_language)#Traversal_Examples

gremlin> g.V().label().groupCount()		// For each vertex in the graph, emit its label, then group and count each distinct label.
==>[occupation:21, movie:3883, category:18, user:6040]

gremlin> g.V().hasLabel('movie').values('year').min()		//What year was the oldest movie made?
==>1919

gremlin> g.V().has('movie','name','Die Hard').inE('rated').values('stars').mean()		// What is Die Hard's average rating?
==>4.121848739495798

***********************************************************************************************************************************

Notes from online lecture:
http://www.slideshare.net/calebwjones/intro-to-graph-databases-using-tinkerpops-titandb-and-gremlin
Suggests Gephi for visualization tool.

Where g is graph traversal.
g.V() // All verticies
g.v() // This verticie (Same with edges)
g.V("thisType", "matchThis")

Where g is a graph factory.
@28:40
g.V.count()
g.E.count()

***********************************************************************************************************************************

Gephi Example
https://www.youtube.com/watch?v=wtiUjna9IMo

***********************************************************************************************************************************

11/16

To run script in Gremlin:
:load /home/casal033/MAP/graph-DBs-and-genetic-programming/gremlin_scripts/LoadNodes.groovy

gremlin> g.V(402206864).valueMap()
==>[generation:[191], total_error:[3554.0], numSelections:[0], numChildren:[0], run_uuid:[884ccc2a-85ec-43d6-b61d-03a33f9e4827], location:[999], uuid:[8536374f-c5b9-46fc-901e-f9d72d9214e5]]

gremlin> g.V().has('total_error', 0.toFloat()).next()
==>v[78712864]
gremlin> g.V().has('total_error', 0f).next()
==>v[78712864]

***********************************************************************************************************************************

11/23

* We're currently deleting the database directory to delete graphs *
Gremlin remove all Vertex:
graph.close()
com.thinkaurelius.titan.core.util.TitanCleanup.clear(graph);

* Ended: Looking at elesticseach for external index based searching *
Install on Bebop next time!

* Not attempted yet *
Adding Edges:
http://gremlindocs.spmallette.documentup.com/#graphaddedge
gremlin> g = new TinkerGraph()
==>tinkergraph[vertices:0 edges:0]
gremlin> v1 = g.addVertex(100)
==>v[100]
gremlin> v2 = g.addVertex(200)
==>v[200]
gremlin> g.addEdge(v1,v2,'friend')
==>e[0][100-friend->200]
gremlin> g.addEdge(1000,v1,v2,'buddy')
==>e[1000][100-buddy->200]
gremlin> g.addEdge(null,v1,v2,'pal',[weight:0.75f])
==>e[1][100-pal->200]

***********************************************************************************************************************************

11/30

* When running gremlin script, if graph directory exists and do not have the write permissions, bad error message occurs

* Close graph and mgmt after running script, otherwise badness and exceptions

* We think the default schema is being used for indexing, and we do not know what type of data it's saved as. We want to set this ourselves.
** we do not want to use the default schema **

*** Should we index before loading everything in?

Login as Maggie
Run gremlin on bebop from directory that has scripts with:
/Research/titan-1.0.0-hadoop1/bin/gremlin.sh

Remove graphes and searchindex before running script
Use :load LoadNodes.groovy in gremlin

***********************************************************************************************************************************

12/7

Range with ints:
g.V().has("total_error", inside(0,150)).count()
Ranges with labels:
g.V().has("total_error", inside(0,150)).count()

Indexing is taking a long period of time, we may want ot remove:
uuid = mgmt.getPropertyKey('uuid')
& replace with run  uuid, may improve speed on building index.
(Success with 100 file, but not with 192,000)

Attempting to build index for at least 10 min.
Got return, however top shows us it's still running.
On close of Gremlin:
Dec 07, 2015 7:12:14 PM com.google.common.cache.LocalCache processPendingNotifications

***********************************************************************************************************************************

12/8

Nic did some playing around and confirmed that we did just need to wait for the index building to finish. 
Not sure how long it actually took, but probably between 30 and 60 minutes.

After the index was build, queries are generally really fast. Some potentially useful queries:

// Find the largest generation in the DB
g.V().values('generation').max()

// Find the minimal total error in generation 176
g.V().has('generation', 176).values('total_error').min()

// Print the minimal total error for each of the 191 generations in a run
// You need the `.next()` bit on the end or you get a TinkerPop object
// instead of the value.
191.times { print " " + g.V().has('generation', it).values('total_error').min().next() }

// Loop over each of 191 generations, and print a line of the form `[gen, min, mean10, mean100]`
// for each generations, where `gen` is the generation, `min` is the minimum `total_error`,
// `mean10` is the average of the 10 best total errors, and `mean100` is the average of the 100
// best total errors in that generation.
191.times { println "[" + it + ", " + (g.V().has('generation', it).values('total_error').min().next()) 
                + ", " + (g.V().has('generation', it).values('total_error').order().limit(10).mean().next()) 
                + ", " + (g.V().has('generation', it).values('total_error').order().limit(100).mean().next()) + "]," }

***********************************************************************************************************************************

12/28
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
How to Titan 0.o:
1) ssh to bebop
2) Change directories to:
cd MAP/graph-DBs-and-genetic-programming/gremlin_scripts/
and run:
/Research/titan-1.0.0-hadoop1/bin/gremlin.sh
3) Use this in Gremlin for Loading Vertices:
:load LoadNodes.groovy
4) Delete graph and searchindex with:
rm -r filename
in:
cd /Research/titan-1.0.0-hadoop1/tmp/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example of implementing buildMixedIndex:
* http://s3.thinkaurelius.com/docs/titan/current/indexes.html
* 8.1.1. Mixed Index

Generally Running the Groovy Script: 
* Always: graph is open & mgmt is closed afterwards
* with 100: GraphIndexStatusReport returns success
* with all: GraphIndexStatusReport returns failure <- Needs time, still running after a half hour. 10:42

Researching Edges Notes:
* Schema consists of: Edge labels and prperty keys 
(you can label verticies, may be useful when referencing how indivual is dervied e.g. 'autocontruction' or 'random')

* Edge label multiplicity options:
  - MULTI: Allows multiple edges of the same label between any pair of vertices.
  - SIMPLE: Allows at most one edge of such label between any pair of vertices.
  - MANY2ONE: Allows at most one outgoing edge of such label on any vertex in the graph but places no constraint on incoming edges. (<- Used in 'mother' edge example)
	Example Snippet of Usage: 
	mgmt = graph.openManagement()
	parent_of = mgmt.makeEdgeLabel('parent_of').multiplicity(MULTI).make()
	mgmt.commit()

** Apparently there is a type 'UUID', should this be considered for the vetex property key type?
	- http://s3.thinkaurelius.com/docs/titan/current/schema.html
	- Under "Table 5.1. Native Titan Data Types"

** Similar but different: Can we assign the vertex ID as the UUID? May be faster for finding vertex.

** Also I found this in Titan Documentation: "It is strongly encouraged to explicitly define all schema elements and to disable automatic schema creation by setting schema.default=none in the Titan graph configuration."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some notes before leaving:

* Running with edges code gives this at end:
==>0
Count = 0
Count = 1
No signature of method: com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.addEdge() is applicable for argument types: (com.thinkaurelius.titan.graphdb.vertices.CacheVertex, com.thinkaurelius.titan.graphdb.vertices.CacheVertex, java.lang.String) values: [v[471160], v[856080], parent_of]

* Want to attempt commenting out the mixed index when adding edges (try just removing first before adding edges)
* May also want to consider placement of making the edge label in the script. It's currently where we create the property keys, could be closer to creating edges.
* Current opened tabs:
	- http://gremlindocs.spmallette.documentup.com/#graphaddedge
	- http://s3.thinkaurelius.com/docs/titan/0.5.4/schema.html#_relation_types
	- http://s3.thinkaurelius.com/docs/titan/current/tx.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

***********************************************************************************************************************************

12/29

* Titan Console (aka Gremlin) Commands
https://jaceklaskowski.gitbooks.io/titan-scala/content/titan-gremlin_aka_titan_console.html

* TinkerPop3 Documentation
http://tinkerpop.incubator.apache.org/docs/3.0.1-incubating/

* Kindof helpful:
https://jaceklaskowski.gitbooks.io/titan-scala/content/titan-finding_vertices.html

* Size of folder commands:		12/29	12/30
		du -sh graph/	-		137M	138M
		du -sh searchindex/	-	23M		11M

* Tried loading just nodes with full file, still does not finish after running for ~ 45 minutes.
* Making smaller file from edge csv file <- Do not have the write permissions to create a new file in the current folder.

* Looking at 1 Million Example (Given Below):
  - A little dated, but I like the idea of a helper function to find verticies. 
http://thinkaurelius.com/blog/
~~~~~~~~~~~~~~~~~~~~~~~~ Start Example ~~~~~~~~~~~~~~~~~~~~~~~~
g = TitanFactory.open('/tmp/1m')
g.makeKey('userId').dataType(String.class).indexed(Vertex.class).unique().make()
g.makeLabel('votesFor').make()
g.commit()
getOrCreate = { id ->
  def p = g.V('userId', id)
  if (p.hasNext()) ? p.next() : g.addVertex([userId:id])
}
new File('wiki-Vote.txt').eachLine {
  if (!it.startsWith("#")){
    (fromVertex, toVertex) = it.split('\t').collect(getOrCreate)
    fromVertex.addEdge('votesFor', toVertex)
  }
}
g.commit()
~~~~~~~~~~~~~~~~~~~~~~~~ END EXAMPLE ~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~ EXAMPLE OF USING 'collect' ~~~~~~~~~~~~~~~~

def fruits = ["Banana", "Apple", "Grape", "Pear"]
def upperCaseFruits = fruits.collect { it.toUpperCase() }
println upperCaseFruits // [BANANA, APPLE, GRAPE, PEAR]

~~~~~~~~~~~~~~~~~~~~~~~~ END EXAMPLE ~~~~~~~~~~~~~~~~~~~~~~~~

*********** TESTING UUID ***********  
22524de5-d59e-4640-8d6e-2a8ec4264e36
************************************

Number of lines in edges.csv:
382001

* Wrote script for LoadEdges.groovy
  - Takes a long period of time to find existing nodes in a graph
  - Not sure if indexing is working appropriately

* Need to ask Nic what mathod he used to get the build mixed index working?
  - If it is the case that build mixed index takes time, how do we know when it stops? 
  - (When to load edges?)

***********************************************************************************************************************************

12/30

* Removed the uuid as Nic did in other experiences to get build mixed index to finish.
* Got the build mixed index to succeed after 45min, this did not help to load the edges faster.

* Adding uuid back into the mixed index for better results hopefully.
* No benefits :/

* Creating different sized files to shorten waiting.


***********************************************************************************************************************************

1/7

* Researching loading. 
	- Take a look at Daniel Kuppitz's GitHub Example and posted comments here:
	- "For Titan you'll need to add a line counter and then graph.tx().commit() every 10.000 lines or so. Also, in your Titan graph configuration, set storage.batch-loading=true to speed things up a bit."
	- https://groups.google.com/forum/#!topic/aureliusgraphs/phHY9jYDHJY

***********************************************************************************************************************************

1/8

* Add labels to verticies 
	- Generation Nodes for stats on each generation
	- Run Nodesfor stats on the whole run

* For Gremlin Queries: 25+ Handy Gremlin Examples and Code Snippets for Graph Database Traversal and Manipulation
	- http://www.fromdev.com/2013/09/Gremlin-Example-Query-Snippets-Graph-DB.html

* Create A Index Using Gremlin <- Instead of composite index.
	- This is to index the graph with specific field you may want to search frequently. Lets say "myfield" 
	- g.createKeyIndex("myfield",Vertex.class);
	- Note: The index creation can be done for not existing fields therefore incase you want to create a index for existing fields you may need to delete all and then create index.

* For finding the the parents in the first generation of those with 0 total_error in the final round.
g.V().has('total_error', 0).repeat(__.in('parent_of')).times(191).dedup().count()

* Querying with mixed indexes 
http://s3.thinkaurelius.com/docs/titan/1.0.0/search-predicates.html

* This query goes through each generation, counts the number of individuals in that generation that are an ancestor of a winner, and then prints that out. I'm guessing there's a more efficient way to do this (this duplicates a *lot* of search), but this works reasonably well on the 192 generation run. 

`192.times { gen -> println gen + "\t" + g.V().has('total_error', 0).until(has('generation', gen)).repeat(inE().outV().dedup()).dedup().count().next() }`
